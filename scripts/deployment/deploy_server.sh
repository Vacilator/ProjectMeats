#!/bin/bash
# ProjectMeats Production Server Deployment Script
# Generated by deploy_production.py

set -e  # Exit on any error

echo "🚀 Starting ProjectMeats production deployment..."

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root or with sudo
if [[ $EUID -eq 0 ]]; then
    log_info "Running as root user"
elif sudo -n true 2>/dev/null; then
    log_info "Running with sudo privileges"
else
    log_error "This script requires root privileges or sudo access"
    exit 1
fi

log_info "Deployment configuration:"
log_info "  Domain: meatscentral.com"
log_info "  SSL: Enabled"
log_info "  Database: SQLITE"

# Update system packages
log_info "Updating system packages..."
apt update && apt upgrade -y

# Install system dependencies (excluding nodejs for now)
log_info "Installing system dependencies..."
apt install -y python3 python3-pip python3-venv nginx git curl ufw fail2ban


# Comprehensive Node.js cleanup
log_info "Removing conflicting Node.js packages..."
# Stop any running Node.js processes
pkill -f node || true

# Remove all Node.js related packages
apt remove -y nodejs npm libnode-dev libnode72 libnode108 nodejs-doc || true
apt purge -y nodejs npm libnode-dev libnode72 libnode108 nodejs-doc || true

# Remove any manually installed Node.js
rm -rf /usr/local/bin/node /usr/local/bin/npm /usr/local/lib/node_modules || true
rm -rf /usr/bin/node /usr/bin/npm || true

# Clean package cache and dependencies
apt autoremove -y
apt autoclean
apt clean

# Update package database
apt update

# Install Node.js 18 LTS from NodeSource with better error handling
log_info "Installing Node.js 18 LTS..."
# Download and install NodeSource setup script
if curl -fsSL https://deb.nodesource.com/setup_18.x -o /tmp/nodesource_setup.sh; then
    log_info "NodeSource setup script downloaded successfully"
    chmod +x /tmp/nodesource_setup.sh
    bash /tmp/nodesource_setup.sh
    
    # Update package list after adding NodeSource repository
    apt update
    
    # Install Node.js with error handling
    if ! apt install -y nodejs; then
        log_error "Failed to install Node.js from NodeSource. Trying alternative method..."
        
        # Fallback: Install Node.js using snap
        log_info "Attempting Node.js installation via snap..."
        if command -v snap >/dev/null 2>&1; then
            snap install node --classic
        else
            # Final fallback: Install from Ubuntu repositories
            log_warning "Installing Node.js from Ubuntu repositories (may be older version)"
            apt install -y nodejs npm
        fi
    fi
else
    log_error "Failed to download NodeSource setup script. Using fallback installation..."
    # Fallback to Ubuntu repositories
    apt install -y nodejs npm
fi

# Verify Node.js installation
log_info "Verifying Node.js installation..."
if command -v node >/dev/null 2>&1; then
    NODE_VERSION=$(node --version)
    log_success "Node.js installed successfully: $NODE_VERSION"
else
    log_error "Node.js installation failed"
    exit 1
fi

if command -v npm >/dev/null 2>&1; then
    NPM_VERSION=$(npm --version)
    log_success "npm installed successfully: $NPM_VERSION"
else
    log_error "npm installation failed"
    exit 1

# Check if Node.js is already available
log_info "Checking Node.js installation..."
if command -v node >/dev/null 2>&1 && command -v npm >/dev/null 2>&1; then
    NODE_VERSION=$(node --version)
    NPM_VERSION=$(npm --version)
    log_success "Node.js $NODE_VERSION and npm $NPM_VERSION are already installed"
    
    # Check if it's a compatible version (Node 16+)
    NODE_MAJOR_VERSION=$(echo $NODE_VERSION | cut -d'.' -f1 | sed 's/v//')
    if [ "$NODE_MAJOR_VERSION" -ge 16 ]; then
        log_success "Node.js version is compatible (v16+)"
    else
        log_warning "Node.js version is older than v16, installing Node.js 18 via NVM..."
        INSTALL_NODE=true
    fi
else
    log_info "Node.js not found, installing Node.js 18 via NVM..."
    INSTALL_NODE=true
fi

# Install Node.js via NVM if needed
if [ "$INSTALL_NODE" = true ]; then
    # Remove existing Node.js packages that might conflict
    log_info "Removing conflicting Node.js packages..."
    apt remove -y nodejs npm libnode-dev libnode72 || true
    apt autoremove -y || true
    
    # Install NVM
    log_info "Installing NVM (Node Version Manager)..."
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
    
    # Load NVM for this session
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    
    # Install Node.js 18 LTS
    log_info "Installing Node.js 18 LTS via NVM..."
    nvm install 18
    nvm use 18
    nvm alias default 18
    
    # Install global packages
    log_info "Installing global Node.js packages..."
    npm install -g yarn pm2
    
    log_success "Node.js 18 installed successfully via NVM"

fi

# Create application user
log_info "Creating application user..."
useradd -m -s /bin/bash projectmeats || true
usermod -aG sudo projectmeats || true

# Configure environment for projectmeats user
log_info "Configuring environment for projectmeats user..."
sudo -u projectmeats bash -c 'echo "export PATH=$PATH:/home/projectmeats/.npm-global/bin" >> /home/projectmeats/.bashrc'

# Create application directories
log_info "Creating application directories..."
mkdir -p /home/projectmeats/{app,logs,backups,uploads}
chown -R projectmeats:projectmeats /home/projectmeats/

# Clone or update application
log_info "Setting up application code..."
if [ ! -d "/home/projectmeats/app" ]; then
    # Try git clone with error handling
    if ! sudo -u projectmeats git clone https://github.com/Vacilator/ProjectMeats.git /home/projectmeats/app 2>/dev/null; then
        log_error "Git clone failed due to authentication issues."
        echo ""
        echo "GitHub authentication error detected!"
        echo "This is because GitHub no longer supports password authentication."
        echo ""
        echo "Solutions:"
        echo "1. Use the no-authentication deployment script:"
        echo "   curl -sSL https://raw.githubusercontent.com/Vacilator/ProjectMeats/main/deploy_no_auth.sh | sudo bash"
        echo ""
        echo "2. Setup Personal Access Token (PAT):"
        echo "   - Go to GitHub.com -> Settings -> Developer settings -> Personal access tokens"
        echo "   - Generate a new token with 'repo' scope"
        echo "   - Use: git clone https://USERNAME:TOKEN@github.com/Vacilator/ProjectMeats.git"
        echo ""
        echo "3. Setup SSH keys:"
        echo "   - Generate: ssh-keygen -t ed25519"
        echo "   - Add public key to GitHub -> Settings -> SSH keys"
        echo "   - Use: git clone git@github.com:Vacilator/ProjectMeats.git"
        echo ""
        echo "4. Manual transfer:"
        echo "   - Download the project on a machine with GitHub access"
        echo "   - Transfer to this server via SCP"
        echo ""
        echo "For detailed instructions, see:"
        echo "https://github.com/Vacilator/ProjectMeats/blob/main/docs/deployment_authentication_guide.md"
        echo ""
        exit 1
    fi
else
    cd /home/projectmeats/app
    if ! sudo -u projectmeats git pull origin main 2>/dev/null; then
        log_warning "Git pull failed, continuing with existing code..."
        echo "Note: Unable to update code from GitHub. Using existing installation."
        echo "If you need the latest version, see the authentication guide:"
        echo "https://github.com/Vacilator/ProjectMeats/blob/main/docs/deployment_authentication_guide.md"
    fi
fi

# Copy environment configuration
log_info "Copying environment configuration..."
cp backend/.env /home/projectmeats/app/backend/.env
cp frontend/.env.production /home/projectmeats/app/frontend/.env.production
chown projectmeats:projectmeats /home/projectmeats/app/backend/.env
chown projectmeats:projectmeats /home/projectmeats/app/frontend/.env.production

# Setup backend
log_info "Setting up Django backend..."
cd /home/projectmeats/app/backend
sudo -u projectmeats python3 -m venv venv
sudo -u projectmeats ./venv/bin/pip install -r requirements.txt
sudo -u projectmeats ./venv/bin/pip install gunicorn

# Run migrations and setup
sudo -u projectmeats ./venv/bin/python manage.py migrate
sudo -u projectmeats ./venv/bin/python manage.py collectstatic --noinput

# Create admin user
log_info "Creating admin user..."
sudo -u projectmeats ./venv/bin/python manage.py shell -c "
from django.contrib.auth import get_user_model;
User = get_user_model();
User.objects.filter(username='admin').exists() or User.objects.create_superuser('admin', 'admin@meatscentral.com', 'WATERMELON1219')
"

# Setup frontend
log_info "Setting up React frontend..."
cd /home/projectmeats/app/frontend


# Configure npm for projectmeats user to avoid permission issues
log_info "Configuring npm for projectmeats user..."
sudo -u projectmeats mkdir -p /home/projectmeats/.npm-global
sudo -u projectmeats npm config set prefix '/home/projectmeats/.npm-global'

# Ensure Node.js and npm are available in PATH for projectmeats user
log_info "Verifying Node.js availability for projectmeats user..."
sudo -u projectmeats bash -c 'export PATH=$PATH:/home/projectmeats/.npm-global/bin; node --version && npm --version'

# Install frontend dependencies with error handling
log_info "Installing frontend dependencies..."
if ! sudo -u projectmeats bash -c 'export PATH=$PATH:/home/projectmeats/.npm-global/bin; npm install'; then
    log_warning "npm install failed, trying with --legacy-peer-deps..."
    if ! sudo -u projectmeats bash -c 'export PATH=$PATH:/home/projectmeats/.npm-global/bin; npm install --legacy-peer-deps'; then
        log_warning "npm install still failing, trying cache clean..."
        sudo -u projectmeats bash -c 'export PATH=$PATH:/home/projectmeats/.npm-global/bin; npm cache clean --force'
        sudo -u projectmeats bash -c 'export PATH=$PATH:/home/projectmeats/.npm-global/bin; npm install --legacy-peer-deps'
    fi
fi

# Build frontend application
log_info "Building React frontend application..."
if ! sudo -u projectmeats bash -c 'export PATH=$PATH:/home/projectmeats/.npm-global/bin; npm run build'; then
    log_error "Frontend build failed. Checking Node.js and npm versions..."
    echo "Node.js version: $(node --version)"
    echo "npm version: $(npm --version)"
    echo "projectmeats user Node.js: $(sudo -u projectmeats bash -c 'export PATH=$PATH:/home/projectmeats/.npm-global/bin; node --version' 2>/dev/null || echo 'not available')"
    echo "projectmeats user npm: $(sudo -u projectmeats bash -c 'export PATH=$PATH:/home/projectmeats/.npm-global/bin; npm --version' 2>/dev/null || echo 'not available')"
    echo "Current directory: $(pwd)"
    echo "package.json exists: $(test -f package.json && echo 'yes' || echo 'no')"
    exit 1
fi

log_success "Frontend build completed successfully"

# Ensure NVM is available for projectmeats user
if [ -d "/root/.nvm" ]; then
    log_info "Setting up NVM for projectmeats user..."
    # Copy NVM to projectmeats user
    cp -r /root/.nvm /home/projectmeats/.nvm
    chown -R projectmeats:projectmeats /home/projectmeats/.nvm
    
    # Add NVM to projectmeats user's bashrc
    echo 'export NVM_DIR="$HOME/.nvm"' >> /home/projectmeats/.bashrc
    echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> /home/projectmeats/.bashrc
    echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> /home/projectmeats/.bashrc
    
    # Run npm commands with NVM environment
    sudo -u projectmeats bash -c 'source ~/.bashrc && npm install'
    sudo -u projectmeats bash -c 'source ~/.bashrc && npm run build'
else
    # Fallback to system npm if available
    sudo -u projectmeats npm install
    sudo -u projectmeats npm run build
fi


# Create Gunicorn configuration
log_info "Creating Gunicorn configuration..."
cat > /home/projectmeats/app/backend/gunicorn.conf.py << 'EOF'
bind = "127.0.0.1:8000"
workers = 3
worker_class = "sync"
worker_connections = 1000
max_requests = 1000
max_requests_jitter = 100
preload_app = True
keepalive = 5

# Logging
accesslog = "/home/projectmeats/logs/gunicorn_access.log"
errorlog = "/home/projectmeats/logs/gunicorn_error.log"
loglevel = "info"
capture_output = True

# Process naming
proc_name = "projectmeats"

# Security
limit_request_line = 4096
limit_request_fields = 100
limit_request_field_size = 8190

# Performance
timeout = 120
graceful_timeout = 120
EOF

# Create systemd service
log_info "Creating systemd service..."
cat > /etc/systemd/system/projectmeats.service << 'EOF'
[Unit]
Description=ProjectMeats Django Application
After=network.target

[Service]
Type=notify
User=projectmeats
Group=projectmeats
RuntimeDirectory=projectmeats
WorkingDirectory=/home/projectmeats/app/backend
Environment=PATH=/home/projectmeats/app/backend/venv/bin
ExecStart=/home/projectmeats/app/backend/venv/bin/gunicorn -c gunicorn.conf.py projectmeats.wsgi:application
ExecReload=/bin/kill -s HUP \$MAINPID
KillMode=mixed
TimeoutStopSec=5
PrivateTmp=true
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# Configure Nginx
log_info "Configuring Nginx..."
rm -f /etc/nginx/sites-enabled/default

cat > /etc/nginx/sites-available/projectmeats << 'EOF'
# Rate limiting
limit_req_zone $binary_remote_addr zone=projectmeats_api:10m rate=10r/s;

# Upstream for Django
upstream projectmeats_backend {
    server 127.0.0.1:8000;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name meatscentral.com www.meatscentral.com;
    return 301 https://$server_name$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name meatscentral.com www.meatscentral.com;

    # SSL Configuration (will be updated by Let's Encrypt)
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    # Frontend static files
    location / {
        root /home/projectmeats/app/frontend/build;
        index index.html;
        try_files $uri $uri/ /index.html;
        
        # Caching for static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # API endpoints
    location /api/ {
        limit_req zone=projectmeats_api burst=20 nodelay;
        
        proxy_pass http://projectmeats_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Admin interface
    location /admin/ {
        proxy_pass http://projectmeats_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Django static files
    location /static/ {
        alias /home/projectmeats/app/backend/staticfiles/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Media files
    location /media/ {
        alias /home/projectmeats/uploads/;
        expires 1d;
        add_header Cache-Control "public";
    }
}
EOF

# Enable site
ln -sf /etc/nginx/sites-available/projectmeats /etc/nginx/sites-enabled/
nginx -t

# Configure firewall
log_info "Configuring firewall..."
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 'Nginx Full'
ufw --force enable

# Start services
log_info "Starting services..."
systemctl daemon-reload
systemctl enable projectmeats
systemctl start projectmeats
systemctl enable nginx
systemctl start nginx

# Setup SSL with Let's Encrypt
log_info "Setting up SSL certificate..."
apt install -y certbot python3-certbot-nginx
certbot --nginx -d meatscentral.com -d www.meatscentral.com --agree-tos --email admin@meatscentral.com --non-interactive

# Setup auto-renewal
echo "0 12 * * * /usr/bin/certbot renew --quiet" | crontab -

# Create backup script
log_info "Creating backup script..."
cat > /home/projectmeats/backup.sh << 'EOF'
#!/bin/bash
# ProjectMeats backup script

BACKUP_DIR="/home/projectmeats/backups"
DATE=$(date +%Y%m%d_%H%M%S)

# SQLite backup
cp /home/projectmeats/app/backend/db.sqlite3 "$BACKUP_DIR/db_backup_$DATE.sqlite3"

# Application backup
tar -czf "$BACKUP_DIR/app_backup_$DATE.tar.gz" /home/projectmeats/app/backend /home/projectmeats/uploads

# Cleanup old backups (keep 7 days)
find "$BACKUP_DIR" -name "*backup_*" -mtime +7 -delete

echo "$(date): Backup completed" >> /home/projectmeats/logs/backup.log
EOF

chmod +x /home/projectmeats/backup.sh
chown projectmeats:projectmeats /home/projectmeats/backup.sh

# Setup backup cron job
echo "0 2 * * * /home/projectmeats/backup.sh" | sudo -u projectmeats crontab -

# Final setup
log_info "Final setup and permissions..."
chown -R projectmeats:projectmeats /home/projectmeats/
chmod -R 755 /home/projectmeats/uploads

log_success "🎉 ProjectMeats deployment completed successfully!"
echo ""
log_info "Next steps:"
log_info "  🌐 Your application is available at: https://meatscentral.com"
log_info "  👤 Admin login: admin / WATERMELON1219"
log_info "  🔒 Admin panel: https://meatscentral.com/admin/"
log_info "  📚 API docs: https://meatscentral.com/api/docs/"
log_info "  📁 Logs: /home/projectmeats/logs/"
log_info "  💾 Backups: /home/projectmeats/backups/"
echo ""
log_info "Services status:"
systemctl status projectmeats --no-pager -l
systemctl status nginx --no-pager -l

echo ""
log_success "Deployment completed! 🚀"