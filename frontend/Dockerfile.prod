# ProjectMeats Frontend Production Dockerfile
# Multi-stage build for optimized React deployment

# Build stage
FROM node:18-alpine AS builder

# Set build environment
ENV NODE_ENV=production

# Install dependencies for node-gyp and security
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    curl

# Create app directory and user
RUN addgroup -g 1000 nodegroup && adduser -u 1000 -G nodegroup -s /bin/sh -D nodeuser
WORKDIR /app

# Copy package files
COPY package*.json ./
RUN chown -R nodeuser:nodegroup /app
USER nodeuser

# Install dependencies with production optimizations
RUN npm ci --only=production --no-audit --no-fund

# Copy source code
COPY --chown=nodeuser:nodegroup . .

# Build the application with production optimizations
RUN npm run build

# Production stage with nginx
FROM nginx:alpine AS production

# Install security tools and utilities
RUN apk add --no-cache \
    curl \
    openssl

# Copy built application from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Create non-root user for security
RUN addgroup -g 101 -S nginx && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Copy production nginx configuration
COPY nginx.prod.conf /etc/nginx/conf.d/default.conf

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html /var/cache/nginx /var/log/nginx

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl --fail --silent --show-error --max-time 5 http://localhost/ || exit 1

# Expose port
EXPOSE 80

# Start nginx as non-root user
USER nginx
CMD ["nginx", "-g", "daemon off;"]