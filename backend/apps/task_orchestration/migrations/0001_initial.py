# Generated by Django 4.2.7 on 2025-08-03 21:55

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Agent",
            fields=[
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Equivalent to PowerApps CreatedOn field",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Equivalent to PowerApps ModifiedOn field",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the agent",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name for the agent",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "agent_type",
                    models.CharField(
                        choices=[
                            ("deployment", "Deployment Agent"),
                            ("code", "Code Agent"),
                            ("testing", "Testing Agent"),
                            ("monitoring", "Monitoring Agent"),
                            ("github", "GitHub Agent"),
                            ("general", "General Purpose Agent"),
                        ],
                        help_text="Type of agent and its primary capabilities",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("busy", "Busy"),
                            ("offline", "Offline"),
                            ("maintenance", "Under Maintenance"),
                            ("error", "Error State"),
                        ],
                        default="available",
                        help_text="Current status of the agent",
                        max_length=20,
                    ),
                ),
                (
                    "capabilities",
                    models.JSONField(
                        default=list,
                        help_text="List of task types this agent can handle",
                    ),
                ),
                (
                    "max_concurrent_tasks",
                    models.PositiveIntegerField(
                        default=3,
                        help_text="Maximum number of concurrent tasks this agent can handle",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                (
                    "priority_weight",
                    models.FloatField(
                        default=1.0,
                        help_text="Priority weight for agent selection (higher = more preferred)",
                        validators=[
                            django.core.validators.MinValueValidator(0.1),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "success_rate",
                    models.FloatField(
                        default=1.0,
                        help_text="Historical success rate (0.0 to 1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "average_completion_time",
                    models.DurationField(
                        default=datetime.timedelta(seconds=3600),
                        help_text="Average time to complete tasks",
                    ),
                ),
                (
                    "last_heartbeat",
                    models.DateTimeField(
                        auto_now=True, help_text="Last time agent reported being alive"
                    ),
                ),
                (
                    "endpoint_url",
                    models.URLField(
                        blank=True,
                        help_text="API endpoint for the agent (if applicable)",
                        null=True,
                    ),
                ),
                (
                    "configuration",
                    models.JSONField(
                        default=dict,
                        help_text="Agent-specific configuration parameters",
                    ),
                ),
                (
                    "total_tasks_completed",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total number of tasks completed by this agent",
                    ),
                ),
                (
                    "total_tasks_failed",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total number of tasks failed by this agent",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this agent is active and available for assignments",
                    ),
                ),
            ],
            options={
                "verbose_name": "AI Agent",
                "verbose_name_plural": "AI Agents",
                "db_table": "task_orchestration_agents",
                "ordering": ["-priority_weight", "name"],
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Equivalent to PowerApps CreatedOn field",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Equivalent to PowerApps ModifiedOn field",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the task",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief descriptive title for the task", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the task"),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("deployment", "Deployment Task"),
                            ("bug_fix", "Bug Fix"),
                            ("feature_development", "Feature Development"),
                            ("system_monitoring", "System Monitoring"),
                            ("data_processing", "Data Processing"),
                            ("github_issue", "GitHub Issue Management"),
                            ("code_review", "Code Review"),
                            ("testing", "Testing"),
                            ("documentation", "Documentation"),
                            ("maintenance", "System Maintenance"),
                        ],
                        help_text="Type/category of the task",
                        max_length=30,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                            ("emergency", "Emergency"),
                        ],
                        default="medium",
                        help_text="Priority level of the task",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Assignment"),
                            ("assigned", "Assigned to Agent"),
                            ("in_progress", "In Progress"),
                            ("blocked", "Blocked"),
                            ("review", "Under Review"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("escalated", "Escalated"),
                        ],
                        default="pending",
                        help_text="Current status of the task",
                        max_length=20,
                    ),
                ),
                (
                    "due_date",
                    models.DateTimeField(
                        blank=True, help_text="Deadline for task completion", null=True
                    ),
                ),
                (
                    "estimated_duration",
                    models.DurationField(
                        default=datetime.timedelta(seconds=3600),
                        help_text="Estimated time to complete the task",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the task execution started",
                        null=True,
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the task was completed", null=True
                    ),
                ),
                (
                    "input_data",
                    models.JSONField(
                        default=dict,
                        help_text="Input data and parameters for task execution",
                    ),
                ),
                (
                    "output_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Output data and results from task execution",
                    ),
                ),
                (
                    "error_details",
                    models.TextField(
                        blank=True, help_text="Error details if task failed", null=True
                    ),
                ),
                (
                    "github_issue_number",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Associated GitHub issue number",
                        null=True,
                    ),
                ),
                (
                    "github_issue_url",
                    models.URLField(
                        blank=True,
                        help_text="URL of the associated GitHub issue",
                        null=True,
                    ),
                ),
                (
                    "retry_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this task has been retried",
                    ),
                ),
                (
                    "max_retries",
                    models.PositiveIntegerField(
                        default=3, help_text="Maximum number of retry attempts"
                    ),
                ),
                (
                    "escalation_level",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Current escalation level (0 = no escalation)",
                    ),
                ),
                (
                    "auto_assign",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this task should be automatically assigned to agents",
                    ),
                ),
                (
                    "auto_retry",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this task should be automatically retried on failure",
                    ),
                ),
                (
                    "auto_escalate",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this task should be automatically escalated",
                    ),
                ),
                (
                    "assigned_agent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Agent assigned to execute this task",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tasks",
                        to="task_orchestration.agent",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Equivalent to PowerApps CreatedBy field",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "depends_on",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Tasks that must be completed before this task can start",
                        related_name="dependent_tasks",
                        to="task_orchestration.task",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="Equivalent to PowerApps ModifiedBy field",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_modified",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Equivalent to PowerApps OwnerId field",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)s_owned",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Orchestrated Task",
                "verbose_name_plural": "Orchestrated Tasks",
                "db_table": "task_orchestration_tasks",
                "ordering": ["-priority", "-created_on"],
            },
        ),
        migrations.CreateModel(
            name="TaskExecutionLog",
            fields=[
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Equivalent to PowerApps CreatedOn field",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Equivalent to PowerApps ModifiedOn field",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "log_level",
                    models.CharField(
                        choices=[
                            ("DEBUG", "Debug"),
                            ("INFO", "Info"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("CRITICAL", "Critical"),
                        ],
                        default="INFO",
                        help_text="Log level",
                        max_length=20,
                    ),
                ),
                ("message", models.TextField(help_text="Log message")),
                (
                    "step_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the execution step",
                        max_length=100,
                    ),
                ),
                (
                    "step_data",
                    models.JSONField(
                        default=dict,
                        help_text="Data associated with this execution step",
                    ),
                ),
                (
                    "execution_time",
                    models.FloatField(
                        blank=True,
                        help_text="Time taken for this step (in seconds)",
                        null=True,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="Agent executing the task",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="execution_logs",
                        to="task_orchestration.agent",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        help_text="Task being executed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="execution_logs",
                        to="task_orchestration.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Execution Log",
                "verbose_name_plural": "Task Execution Logs",
                "db_table": "task_orchestration_execution_logs",
                "ordering": ["-created_on"],
            },
        ),
        migrations.CreateModel(
            name="TaskAssignment",
            fields=[
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Equivalent to PowerApps CreatedOn field",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Equivalent to PowerApps ModifiedOn field",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "assigned_by",
                    models.CharField(
                        default="orchestration_engine",
                        help_text="Who/what assigned this task",
                        max_length=100,
                    ),
                ),
                (
                    "assignment_reason",
                    models.TextField(help_text="Reason for this specific assignment"),
                ),
                (
                    "assigned_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the assignment was made"
                    ),
                ),
                (
                    "accepted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the agent accepted the assignment",
                        null=True,
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the assignment was completed",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this assignment is currently active",
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        help_text="Agent receiving the assignment",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_assignments",
                        to="task_orchestration.agent",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        help_text="Task being assigned",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="task_orchestration.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "Task Assignment",
                "verbose_name_plural": "Task Assignments",
                "db_table": "task_orchestration_assignments",
                "ordering": ["-assigned_at"],
            },
        ),
        migrations.CreateModel(
            name="SystemHealth",
            fields=[
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Equivalent to PowerApps CreatedOn field",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Equivalent to PowerApps ModifiedOn field",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "component",
                    models.CharField(
                        help_text="System component being monitored", max_length=50
                    ),
                ),
                (
                    "metric_name",
                    models.CharField(
                        help_text="Name of the health metric", max_length=100
                    ),
                ),
                (
                    "metric_value",
                    models.JSONField(help_text="Current value of the metric"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("healthy", "Healthy"),
                            ("warning", "Warning"),
                            ("critical", "Critical"),
                            ("unknown", "Unknown"),
                        ],
                        help_text="Health status",
                        max_length=20,
                    ),
                ),
                (
                    "threshold_warning",
                    models.JSONField(
                        blank=True,
                        help_text="Warning threshold for this metric",
                        null=True,
                    ),
                ),
                (
                    "threshold_critical",
                    models.JSONField(
                        blank=True,
                        help_text="Critical threshold for this metric",
                        null=True,
                    ),
                ),
                (
                    "last_check",
                    models.DateTimeField(
                        auto_now=True, help_text="When this metric was last checked"
                    ),
                ),
            ],
            options={
                "verbose_name": "System Health Metric",
                "verbose_name_plural": "System Health Metrics",
                "db_table": "task_orchestration_system_health",
                "ordering": ["-last_check"],
                "indexes": [
                    models.Index(
                        fields=["component", "status"],
                        name="task_orches_compone_499134_idx",
                    ),
                    models.Index(
                        fields=["status", "-last_check"],
                        name="task_orches_status_a16e5b_idx",
                    ),
                ],
                "unique_together": {("component", "metric_name")},
            },
        ),
        migrations.CreateModel(
            name="OrchestrationRule",
            fields=[
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Equivalent to PowerApps CreatedOn field",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Equivalent to PowerApps ModifiedOn field",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name for the orchestration rule",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Description of what this rule does"),
                ),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("task_creation", "Task Creation"),
                            ("task_assignment", "Task Assignment"),
                            ("task_escalation", "Task Escalation"),
                            ("agent_selection", "Agent Selection"),
                            ("failure_handling", "Failure Handling"),
                            ("monitoring", "Monitoring"),
                        ],
                        help_text="Type of orchestration rule",
                        max_length=30,
                    ),
                ),
                (
                    "trigger_conditions",
                    models.JSONField(help_text="Conditions that trigger this rule"),
                ),
                (
                    "actions",
                    models.JSONField(
                        help_text="Actions to take when rule is triggered"
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Rule priority (lower number = higher priority)",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this rule is active"
                    ),
                ),
                (
                    "trigger_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this rule has been triggered",
                    ),
                ),
                (
                    "last_triggered",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this rule was last triggered",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Orchestration Rule",
                "verbose_name_plural": "Orchestration Rules",
                "db_table": "task_orchestration_rules",
                "ordering": ["priority", "name"],
                "indexes": [
                    models.Index(
                        fields=["rule_type", "is_active"],
                        name="task_orches_rule_ty_ff3ba7_idx",
                    ),
                    models.Index(
                        fields=["priority"], name="task_orches_priorit_6566a7_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="agent",
            index=models.Index(
                fields=["agent_type", "status"], name="task_orches_agent_t_9ae572_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="agent",
            index=models.Index(
                fields=["status", "is_active"], name="task_orches_status_19d0fb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="agent",
            index=models.Index(
                fields=["priority_weight"], name="task_orches_priorit_64a4a5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskexecutionlog",
            index=models.Index(
                fields=["task", "-created_on"], name="task_orches_task_id_0c2b81_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskexecutionlog",
            index=models.Index(
                fields=["agent", "-created_on"], name="task_orches_agent_i_cff18a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskexecutionlog",
            index=models.Index(
                fields=["log_level"], name="task_orches_log_lev_070ec7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskassignment",
            index=models.Index(
                fields=["task", "is_active"], name="task_orches_task_id_26b91b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskassignment",
            index=models.Index(
                fields=["agent", "is_active"], name="task_orches_agent_i_e0c598_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskassignment",
            index=models.Index(
                fields=["assigned_at"], name="task_orches_assigne_373d39_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["status", "priority"], name="task_orches_status_dbb5a8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["task_type", "status"], name="task_orches_task_ty_e3218e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["assigned_agent", "status"],
                name="task_orches_assigne_c56a66_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["due_date"], name="task_orches_due_dat_ff6fee_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["auto_assign", "status"], name="task_orches_auto_as_4f5059_idx"
            ),
        ),
    ]
