services:
  # PostgreSQL Database with security hardening
  db:
    image: postgres:15-alpine
    container_name: projectmeats-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache with authentication
  redis:
    image: redis:7-alpine
    container_name: projectmeats-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend with production optimizations
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
      target: production
    container_name: projectmeats-backend
    user: "1000:1000"  # Non-root user
    command: >
      gunicorn 
      --bind 0.0.0.0:8000 
      --workers 3
      --worker-class gthread
      --threads 2
      --worker-connections 1000
      --max-requests 1000
      --max-requests-jitter 100
      --access-logfile /var/log/projectmeats/gunicorn-access.log
      --error-logfile /var/log/projectmeats/gunicorn-error.log
      --log-level info
      --timeout 120
      --graceful-timeout 30
      projectmeats.wsgi:application
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: 
      - .env.prod
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=False
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECURE_SSL_REDIRECT=True
      - SESSION_COOKIE_SECURE=True
      - CSRF_COOKIE_SECURE=True
      - SECURE_HSTS_SECONDS=31536000
      - SECURE_HSTS_INCLUDE_SUBDOMAINS=True
      - SECURE_HSTS_PRELOAD=True
    restart: unless-stopped
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./logs:/var/log/projectmeats
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # React Frontend with nginx serving
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      target: production
      args:
        - REACT_APP_API_BASE_URL=https://${DOMAIN}/api
    container_name: projectmeats-frontend
    restart: unless-stopped
    networks:
      - frontend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /var/log/nginx

  # Nginx Reverse Proxy with SSL termination
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.prod
    container_name: projectmeats-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Task Worker  
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      target: production
    container_name: projectmeats-celery
    command: celery -A projectmeats worker -l info --uid=1000 --gid=1000
    user: "1000:1000"
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - DJANGO_SETTINGS_MODULE=projectmeats.settings.production
    volumes:
      - media_files:/app/media
      - ./logs:/var/log/projectmeats
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    networks:
      - backend

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: projectmeats-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - backend
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: projectmeats-grafana
    ports:
      - "3001:3000"  # Changed from 3000 to avoid conflicts
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    restart: unless-stopped
    networks:
      - backend
    profiles:
      - monitoring

  # Automated database backup
  backup:
    image: postgres:15-alpine
    container_name: projectmeats-backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
    networks:
      - backend
    restart: "no"
    profiles:
      - backup
    command: >
      sh -c "
        while true; do
          echo 'Starting backup at $(date)'
          pg_dump -h db -U ${POSTGRES_USER} -d ${POSTGRES_DB} > /backups/backup-$(date +%Y%m%d-%H%M%S).sql
          find /backups -name '*.sql' -mtime +7 -delete
          echo 'Backup completed at $(date)'
          sleep 86400
        done
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks for security isolation
networks:
  frontend:
    driver: bridge
    internal: false
  backend:
    driver: bridge
    internal: true