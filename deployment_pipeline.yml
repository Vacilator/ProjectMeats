# ProjectMeats Deployment Pipeline Configuration
#
# This file defines the complete deployment pipeline for ProjectMeats
# Supporting multiple environments and deployment strategies

# Deployment Pipeline Configuration
deployment:
  # Global settings
  global:
    project_name: "ProjectMeats"
    repository: "Vacilator/ProjectMeats"
    default_branch: "main"
    
  # Environment definitions
  environments:
    development:
      domain: "dev.projectmeats.local"
      database: "sqlite"
      debug: true
      ssl_enabled: false
      monitoring: false
      
    staging:
      domain: "staging.projectmeats.com"
      database: "postgresql"
      debug: false
      ssl_enabled: true
      monitoring: true
      auto_deploy: true  # Deploy automatically on main branch push
      
    production:
      domain: "projectmeats.com"
      database: "postgresql"
      debug: false
      ssl_enabled: true
      monitoring: true
      auto_deploy: false  # Requires manual approval
      backup_enabled: true
      
  # Deployment strategies
  strategies:
    standard:
      description: "Traditional server deployment"
      steps:
        - system_setup
        - database_setup
        - application_download
        - backend_setup
        - frontend_setup
        - nginx_configuration
        - ssl_setup
        - security_hardening
        - monitoring_setup
        
    docker:
      description: "Container-based deployment"
      steps:
        - system_setup
        - docker_installation
        - application_download
        - docker_compose_setup
        - container_build
        - container_deployment
        - nginx_proxy_setup
        - ssl_setup
        - monitoring_setup
        
    kubernetes:
      description: "Kubernetes cluster deployment"
      steps:
        - kubernetes_setup
        - namespace_creation
        - secret_management
        - persistent_volume_setup
        - application_deployment
        - service_configuration
        - ingress_setup
        - monitoring_setup

# Infrastructure requirements
infrastructure:
  minimum_requirements:
    cpu: "1 vCPU"
    memory: "2GB RAM"
    storage: "20GB SSD"
    os: "Ubuntu 20.04+"
    
  recommended_requirements:
    cpu: "2 vCPU"
    memory: "4GB RAM"
    storage: "50GB SSD"
    os: "Ubuntu 22.04 LTS"
    
  production_requirements:
    cpu: "4 vCPU"
    memory: "8GB RAM"
    storage: "100GB SSD"
    os: "Ubuntu 22.04 LTS"
    network: "1Gbps"

# Security configuration
security:
  firewall:
    allowed_ports:
      - 22    # SSH
      - 80    # HTTP
      - 443   # HTTPS
      - 8080  # Webhook handler (internal)
      
  ssl:
    provider: "letsencrypt"
    auto_renewal: true
    
  authentication:
    github_required: false
    two_factor: recommended
    
  monitoring:
    fail2ban: true
    rate_limiting: true
    security_headers: true

# Monitoring and alerting
monitoring:
  health_checks:
    interval: "30s"
    timeout: "10s"
    retries: 3
    
  alerts:
    email: true
    webhook: true
    
  metrics:
    - system_resources
    - application_performance
    - database_performance
    - user_activity
    
  logging:
    level: "INFO"
    retention: "30 days"
    rotation: "daily"

# Backup configuration
backup:
  database:
    frequency: "daily"
    retention: "7 days"
    compression: true
    
  files:
    frequency: "weekly"
    retention: "4 weeks"
    
  offsite:
    enabled: false  # Configure external backup service

# CI/CD Integration
cicd:
  triggers:
    - push_to_main
    - pull_request
    - scheduled_deployment
    
  stages:
    - code_quality_checks
    - security_scanning
    - automated_testing
    - build_artifacts
    - deployment_validation
    - staging_deployment
    - production_deployment
    
  notifications:
    slack: false  # Configure webhook URL
    email: true
    github: true

# Cloud provider configurations
cloud_providers:
  aws:
    services:
      - EC2
      - RDS
      - S3
      - CloudFront
      - Route53
      
  digitalocean:
    services:
      - Droplets
      - Managed Databases
      - Spaces
      - Load Balancers
      
  azure:
    services:
      - Virtual Machines
      - Azure Database
      - Blob Storage
      - Application Gateway
      
  gcp:
    services:
      - Compute Engine
      - Cloud SQL
      - Cloud Storage
      - Cloud Load Balancing

# Performance optimization
performance:
  caching:
    redis: true
    nginx: true
    django: true
    
  compression:
    gzip: true
    brotli: false
    
  cdn:
    enabled: false  # Configure CDN service
    
  database:
    connection_pooling: true
    query_optimization: true
    indexing: true

# Development tools
development:
  debugging:
    django_debug_toolbar: false  # Only in development
    sentry: true  # Error tracking
    
  testing:
    unit_tests: true
    integration_tests: true
    e2e_tests: false
    
  code_quality:
    linting: true
    formatting: true
    type_checking: true