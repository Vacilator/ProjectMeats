#!/bin/bash
# ProjectMeats AI Deployment Quick Start
# =====================================
# AI-powered deployment orchestrator with intelligent error recovery
# Generated by setup wizard - auto-detects configuration and executes deployment

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Logging functions
log_header() { echo -e "\n${PURPLE}${BOLD}$1${NC}"; }
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

log_header "ü§ñ ProjectMeats AI Deployment Orchestrator"
echo -e "${CYAN}Intelligent deployment with autonomous error recovery${NC}"
echo "==========================================================="

# Check if configuration exists
CONFIG_FILE="ai_deployment_config.json"
QUICKSTART_CONFIG="ai_deployment_config.quickstart.json"

if [ ! -f "$CONFIG_FILE" ]; then
    if [ -f "$QUICKSTART_CONFIG" ]; then
        log_warning "Main config not found, but quickstart template is available"
        echo ""
        log_info "Quick setup options:"
        echo -e "  ${CYAN}1. Copy template:${NC} cp $QUICKSTART_CONFIG $CONFIG_FILE"
        echo -e "  ${CYAN}2. Edit config:${NC}   nano $CONFIG_FILE (update your server details)"
        echo -e "  ${CYAN}3. Run setup:${NC}     python setup_ai_deployment.py"
        echo ""
        read -p "Copy quickstart template now? [Y/n]: " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
            cp "$QUICKSTART_CONFIG" "$CONFIG_FILE"
            log_success "Quickstart config copied to $CONFIG_FILE"
            log_info "‚ö†Ô∏è  Remember to update server details in the config file before deployment"
            log_info "   Edit with: nano $CONFIG_FILE"
        else
            log_error "Configuration required to proceed"
            exit 1
        fi
    else
        log_error "Configuration file not found: $CONFIG_FILE"
        echo ""
        log_info "Please run the setup wizard first:"
        echo -e "  ${CYAN}python setup_ai_deployment.py${NC}"
        echo ""
        exit 1
    fi
fi

# Check Python and dependencies
log_info "Checking Python and dependencies..."
if ! command -v python3 &> /dev/null; then
    log_error "Python 3 is required but not installed"
    exit 1
fi

# Check for required Python packages
python3 -c "import paramiko, scp" 2>/dev/null || {
    log_warning "Missing dependencies, installing..."
    pip3 install -r ai_deployment_requirements.txt || {
        log_error "Failed to install dependencies"
        log_info "Please install manually: pip3 install -r ai_deployment_requirements.txt"
        exit 1
    }
}

log_success "Dependencies verified"

# Parse command line arguments
INTERACTIVE=false
AUTO_APPROVE=false
SERVER=""
DOMAIN=""
PROFILE=""
TEST_ONLY=false
RESUME=false
DEPLOYMENT_ID=""

show_usage() {
    echo ""
    log_header "Usage Examples:"
    echo -e "  ${CYAN}$0 --interactive${NC}                    # Interactive setup with prompts"
    echo -e "  ${CYAN}$0 --server myserver.com --domain mydomain.com${NC}  # Direct deployment"
    echo -e "  ${CYAN}$0 --profile production${NC}             # Use predefined server profile"
    echo -e "  ${CYAN}$0 --test --server myserver.com${NC}     # Test connection only"
    echo -e "  ${CYAN}$0 --resume --deployment-id abc123${NC}  # Resume failed deployment"
    echo ""
    log_header "Available Options:"
    echo -e "  ${YELLOW}--interactive${NC}           Run in interactive mode with prompts"
    echo -e "  ${YELLOW}--auto${NC}                  Auto-approve all prompts (use with caution)"
    echo -e "  ${YELLOW}--server HOSTNAME${NC}       Target server hostname or IP"
    echo -e "  ${YELLOW}--domain DOMAIN${NC}         Domain name for SSL setup"
    echo -e "  ${YELLOW}--profile NAME${NC}          Use predefined server profile"
    echo -e "  ${YELLOW}--test${NC}                  Test connection and exit"
    echo -e "  ${YELLOW}--resume${NC}                Resume a failed deployment"
    echo -e "  ${YELLOW}--deployment-id ID${NC}      Deployment ID for resume operation"
    echo -e "  ${YELLOW}--help${NC}                  Show this help message"
    echo ""
    log_header "Server Profiles:"
    if [ -f "$CONFIG_FILE" ]; then
        python3 -c "
import json
try:
    with open('$CONFIG_FILE') as f:
        config = json.load(f)
    profiles = config.get('server_profiles', {})
    if profiles:
        for name, profile in profiles.items():
            print(f'  {name}: {profile.get(\"hostname\", \"N/A\")} ({profile.get(\"username\", \"root\")})')
    else:
        print('  No server profiles configured')
except:
    print('  Error reading configuration')
"
    fi
    echo ""
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --interactive|-i)
            INTERACTIVE=true
            shift
            ;;
        --auto|-a)
            AUTO_APPROVE=true
            shift
            ;;
        --server|-s)
            SERVER="$2"
            shift 2
            ;;
        --domain|-d)
            DOMAIN="$2"
            shift 2
            ;;
        --profile|-p)
            PROFILE="$2"
            shift 2
            ;;
        --test|-t)
            TEST_ONLY=true
            shift
            ;;
        --resume|-r)
            RESUME=true
            shift
            ;;
        --deployment-id)
            DEPLOYMENT_ID="$2"
            shift 2
            ;;
        --help|-h)
            show_usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# If no arguments provided, show usage
if [ "$INTERACTIVE" = false ] && [ -z "$SERVER" ] && [ -z "$PROFILE" ] && [ "$TEST_ONLY" = false ] && [ "$RESUME" = false ]; then
    log_warning "No deployment options specified"
    show_usage
    exit 1
fi

# Build Python command arguments
PYTHON_ARGS=""

if [ "$INTERACTIVE" = true ]; then
    PYTHON_ARGS="$PYTHON_ARGS --interactive"
fi

if [ "$AUTO_APPROVE" = true ]; then
    PYTHON_ARGS="$PYTHON_ARGS --auto-approve"
fi

if [ -n "$SERVER" ]; then
    PYTHON_ARGS="$PYTHON_ARGS --server $SERVER"
fi

if [ -n "$DOMAIN" ]; then
    PYTHON_ARGS="$PYTHON_ARGS --domain $DOMAIN"
fi

if [ -n "$PROFILE" ]; then
    PYTHON_ARGS="$PYTHON_ARGS --profile $PROFILE"
fi

if [ "$TEST_ONLY" = true ]; then
    PYTHON_ARGS="$PYTHON_ARGS --test-connection"
fi

if [ "$RESUME" = true ]; then
    PYTHON_ARGS="$PYTHON_ARGS --resume"
    if [ -n "$DEPLOYMENT_ID" ]; then
        PYTHON_ARGS="$PYTHON_ARGS --deployment-id $DEPLOYMENT_ID"
    fi
fi

# Show configuration status
log_info "Configuration loaded: $CONFIG_FILE"

# Execute AI deployment orchestrator
log_header "üöÄ Starting AI Deployment Process"
echo -e "${CYAN}Command: python3 ai_deployment_orchestrator.py$PYTHON_ARGS${NC}"
echo ""

# Execute with proper error handling
if python3 ai_deployment_orchestrator.py $PYTHON_ARGS; then
    echo ""
    log_success "üéâ Deployment completed successfully!"
    echo ""
    log_header "Next Steps:"
    log_info "‚Ä¢ Access your application in the browser"
    log_info "‚Ä¢ Check deployment logs in the logs/ directory"
    log_info "‚Ä¢ Monitor server performance"
    echo ""
else
    EXIT_CODE=$?
    echo ""
    log_error "‚ùå Deployment failed with exit code $EXIT_CODE"
    echo ""
    log_header "Troubleshooting:"
    log_info "‚Ä¢ Check logs in the logs/ directory for detailed error information"
    log_info "‚Ä¢ Review deployment state for resumable operations"
    log_info "‚Ä¢ Use --test option to verify server connectivity"
    log_info "‚Ä¢ Try --resume option if deployment can be continued"
    echo ""
    log_header "Recovery Options:"
    if [ "$RESUME" = false ]; then
        log_info "‚Ä¢ Resume deployment: $0 --resume"
    fi
    log_info "‚Ä¢ Test connection: $0 --test --server $SERVER"
    log_info "‚Ä¢ Check troubleshooting guide: docs/ai_deployment_guide.md"
    echo ""
    exit $EXIT_CODE
fi